package main

import (
	"bufio"
	"encoding/json"
	"fmt"
	"io"
	"os"
	"unicode"
	"unicode/utf8"
)

// func main() {
// 	var ages basic_type[string]int
// 	ages = make(basic_type[string]int)
// 	ages["carol"] = 21
// 	fmt.Println(ages)
// 	fmt.Println(ages["aaaa"])
// 	age, ok := ages["bob"]
// 	fmt.Println(age, ok)
// }

// practice
// 1.修改charcount的代码来统计字母、数字和其他在Unicode分类中字符数量，可以使用函数unicode.IsLetter等。
const (
	LETTER = iota
	DIGIT
	OTHER
)

func main22() {
	counts := make(map[int]int)
	var utflen [utf8.UTFMax]int
	invalid := 0
	in := bufio.NewReader(os.Stdin)
	for {
		r, n, err := in.ReadRune() // 返回 rune nbytes error
		if err == io.EOF {
			break
		}
		if err != nil {
			fmt.Fprintf(os.Stderr, "charcount: %v\n", err)
			os.Exit(1)
		}
		if r == unicode.ReplacementChar && n == 1 {
			invalid++
			continue
		}

		if unicode.IsDigit(r) {
			counts[DIGIT]++
		} else if unicode.IsLetter(r) {
			counts[LETTER]++
		} else {
			counts[OTHER]++
			// fmt.Printf("%q, %d\n", r, r)
		}
		utflen[n]++
	}
	fmt.Println(counts)
	// 	fmt.Printf("rune\tcount\n")
	// 	for c, n := range counts {
	// 		fmt.Printf("%q\t%d\n", c, n)
	// 	}
	// 	fmt.Printf("\nlen\tcount\n")
	// 	for i, n := range utflen {
	// 		if i > 0 {
	// 			fmt.Printf("%d\t%d\n", i, n)
	// 		}
	// 	}
	// 	if invalid > 0 {
	// 		fmt.Printf("\n%d invalid UTF-8 characters\n", invalid)
	// 	}
}

func modifySlice3(innerSlice []string) {
	innerSlice[0] = "b"
	innerSlice = append(innerSlice, "a")
	innerSlice[1] = "b"
	fmt.Println(innerSlice) // b b a
}

func main3() {
	outerSlice := []string{"a", "a"}
	modifySlice(outerSlice)
	fmt.Println(outerSlice) // b a
}

func modifySlice(innerSlice []string) {
	innerSlice = append(innerSlice, "a") // "a" "a"  "a"
	innerSlice[0] = "b"
	innerSlice[1] = "b"
	fmt.Println(innerSlice) // "b" "b" "a"
}
func main4() {
	outerSlice := make([]string, 0, 3)
	outerSlice = append(outerSlice, "a", "a") // "a", "a",
	fmt.Println(outerSlice)
	modifySlice(outerSlice)
	fmt.Println(outerSlice) // "a", "a"
}

type AutoGenerated struct {
	Age   int    `json:"age"`
	Name  string `json:"name"`
	Child []int  `json:"child"`
}

func main() {
	jsonStr1 := `{"age": 14,"name": "potter", "child":[1,2,3]}`
	a := AutoGenerated{}
	json.Unmarshal([]byte(jsonStr1), &a)
	aa := a.Child
	fmt.Println(aa) // [1, 2, 3]
	jsonStr2 := `{"age": 12,"name": "potter", "child":[3,4,5,7,8,9]}`
	// a.Child = nil
	fmt.Println(a)
	json.Unmarshal([]byte(jsonStr2), &a)
	fmt.Println(a.Child) // [3, 4, 5, 7, 8, 9]
}
